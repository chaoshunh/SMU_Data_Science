data.frame(combos)
colMeans(combos)
combos[1,]
combos[c(1,2),]
combos[c(1,2),]*(8/9)
combos[c(1,2),]*(8/9)+combos[c(1,2),]*(1/9)
colMeans(combos)
combos[c(1,2),]*(8/9)+combos[c(3,),]*(1/9)
combos[c(1,2),]*(8/9)+combos[3,]*(1/9)
strCombos <- rbind(combos,200)
strCombos
library(gdata)
df <- read.xls('~/desktop/lab3_data.xlsx')
df$X <- NULL
df <- head(df,9)
library(gdata)
df <- read.xls('~/desktop/lab3_data.xlsx')
df$X <- NULL
df <- head(df, 9)
# Begin Exercise 1
dfEx1 <- head(df, 8)
combos <- combn(dfEx1$act_inc, 2)
combos
combosID <- combn(dfEx1$ID,2)
combosID
dfIDs <- data.frame(one=combosID[1,], two = combosID[2,])
dfIDs
means <- colMeans(combos)
means
vars <- apply(combos, 2, var)
vars
dfOut <- data.frame(means = means, vars = vars)
dfOut
meanMeans <- mean(dfOut$means)
meanVars <- mean(dfOut$vars)
meanMeans
meanVars
strCombos <- rbind(combos,200)
strCombos
strMeans <- combos[c(1,2),]*(8/9)+combos[3,]*(1/9)
strMeans <- (strCombos[c(1,2),]*(8/9))+(strCombos[3,]*(1/9))
strMeans
strCombos
strMeans <- (colMeans(strCombos[c(1,2),])*(8/9))+(strCombos[3,]*(1/9))
strMeans
strMeans <- (colMeans(combos)*(8/9))+(200*(1/9))
strMeans
means
strMeans <- (means*(8/9))+(200*(1/9)) # sample 9 is always 200, always in sample, representing 1/9 wt
strMeans
write.csv(strMeans,'~/desktop/stuff.csv')
mean(strMeans)
sum(strMeans)
mean(df$act_inc)
mean(dfEx1$act_inc)
var(dfEx1$act_inc)
meanMeans
meanVars
hist(meanMeans)
hist(means)
means
library(gdata)
df <- read.xls('~/desktop/lab3_data.xlsx')
df$X <- NULL
df <- head(df, 9)
# Begin Exercise 1
dfEx1 <- head(df, 8)
combos <- combn(dfEx1$act_inc, 2)
combosID <- combn(dfEx1$ID,2)
dfIDs <- data.frame(one=combosID[1,], two = combosID[2,])
#write.csv(dfIDs,'~/desktop/combos.csv')
means <- colMeans(combos)
vars <- apply(combos, 2, var)
vars
hist(means)
hist(vars)
mean(vars)
mean(df$act_inc)
mean(dfEx1$act_inc)
mode(means)
sort(means)
hist(means)
abline(v=mean(means),col='red',lwd=2)
hist(vars)
abline(v=mean(vars),col='red',lwd=2)
hist(df$act_inc)
df
strMeans <- (means*(8/9))+(200*(1/9)) # sample 9 is always 200, always in sample, representing 1/9 wt
mean(df$act_inc)
library(gdata)
df <- read.xls('~/desktop/lab3_data.xlsx')
df$X <- NULL
df <- head(df, 9)
# Begin Exercise 1
dfEx1 <- head(df, 8)
combos <- combn(dfEx1$act_inc, 2)
combosID <- combn(dfEx1$ID,2)
dfIDs <- data.frame(one=combosID[1,], two = combosID[2,])
#write.csv(dfIDs,'~/desktop/combos.csv')
means <- colMeans(combos)
vars <- apply(combos, 2, var)
hist(means)
abline(v=mean(means),col='red',lwd=2)
hist(vars)
abline(v=mean(vars),col='red',lwd=2)
dfOut <- data.frame(means = means, vars = vars)
meanMeans <- mean(dfOut$means)
meanVars <- mean(dfOut$vars)
#write.csv(dfOut,'~/desktop/dfOut.csv')
# Calculate Population Mean and Variance
mean(dfEx1$act_inc)
var(dfEx1$act_inc)
# unbiased estimations of means, equal the population parameters
# Begin Exercise 2, must include tax payer 9
# total size of sample is 9, must weigh strata selections appropriately
strMeans <- (means*(8/9))+(200*(1/9)) # sample 9 is always 200, always in sample, representing 1/9 wt
mean(df$act_inc)
mean(strMeans)
mean(df$act_inc)
hist(strMeans)
abline(v=mean(vars),col='red',lwd=2)
hist(strMeans)
abline(v=mean(strMeans),col='red',lwd=2)
var(strMeans)
means
var(means)
mean(df$act_inc)
mean(strMeans)
means
mean(means)
mean(dfEx1$act_inc)
var(dfEx1$act_inc)
var(df$act_inc)
var(200)
strVars <- (vars*(8/9))+0 # sample 9 is always 200, always in sample, representing 1/9 wt
strVars
mean(strVars)
library(gdata)
df <- read.xls('~/desktop/lab3_data.xlsx')
df$X <- NULL
df <- head(df, 9)
# Begin Exercise 1
dfEx1 <- head(df, 8)
combos <- combn(dfEx1$act_inc, 2)
# dfIDs <- data.frame(one=combosID[1,], two = combosID[2,])
# combosID <- combn(dfEx1$ID,2) # for excel to word copy paste
# write.csv(dfIDs,'~/desktop/combos.csv')
means <- colMeans(combos)
vars <- apply(combos, 2, var)
means
vars
length(means)
hist(means)
abline(v=mean(means),col='red',lwd=2)
hist(vars)
abline(v=mean(vars),col='red',lwd=2)
mean(means)
mean(vars)
mean(means)
mean(vars)
mean(means)
mean(vars)
#write.csv(dfOut,'~/desktop/dfOut.csv')
# Calculate Population Mean and Variance
mean(dfEx1$act_inc)
var(dfEx1$act_inc)
mean(dfEx1$act_inc) == mean(means)
var(dfEx1$act_inc) == mean(vars)
mean(strMeans) == mean(df$act_inc)
hist(strMeans)
abline(v=mean(strMeans),col='red',lwd=2)
var(df$act_inc)
sqrt(sum((means-mean(means))^2*(1/28)))
means
sqrt(sum((strMeans-mean(strMeans))^2*(1/28)))
mean(strMeans)
strMeans
sum((strMeans-mean(strMeans))^2*(1/28))
var(df$act_inc)
df$act_inc
sum((strMeans-mean(strMeans))^2
)
hours <- c(27,55,24,100,18,60,0,21)
born <- c(0,1,0,1,0,1,1,1) # Born in US = 1
gender <- c(1,1,0,0,1,1,1,1) # Male = 1
grad <- c(1,0,1,0,1,0,1,1) # Graduate = 1
df <- data.frame(hours=hours, born=born, gender=gender, grad=grad)
hours <- c(27,55,24,100,18,60,0,21)
born <- c(0,1,0,1,0,1,1,1) # Born in US = 1
gender <- c(1,1,0,0,1,1,1,1) # Male = 1
grad <- c(1,0,1,0,1,0,1,1) # Graduate = 1
df <- data.frame(hours=hours, born=born, gender=gender, grad=grad)
# statistics for hours taken from sample
hrsMean <- mean(df$hours) # mean of hours
hrsSD <- sd(df$hours) # standard deviation of hours
# SAMPLING DISTRIBUTION OF PROPORTIONS
# Proportions of Born in US
# combinations of proportions from born vector
bornMean <- mean(df$born)
meansBorn <- colMeans(combn(df$born,2)) # means of all combinations of 1,0 across students
meanBorn <- mean(colMeans(combn(df$born,2))) # mean of sampling distribution of proportions
meanBorn == bornMean
hist(meansBorn)
# sample proportion Variance
# take probability of success * 1-probability success*N/N-1
seBornBrute <- sqrt(sum((meansBorn-bornMean)^2*1/28)) # brute force method of obtaining SE from Sampling Dist of Proportion
varBorn = bornMean*(1-bornMean)*(length(df$born)/(length(df$born)-1)) # CLT method, variance depends on proportion (bornMean)
seBornCLT = sqrt(varBorn/2*(1-2/8)) # sqrt(variance of proportion/2 * finite population correction)
seBornCLT == seBornBrute
# Sample Hours Sampling Distribution
# take all combinations of sample of 2 from population of 8
hoursMeans <- colMeans(combn(df$hours,2))
hoursMean <- mean(colMeans(combn(df$hours,2))) # mean of sampling distribution for total distribution
meanHours == hrsMean # mean is unbiased estimator
hist(meansHours)
abline(v=meanHours, col='red')
# mean of sampling distribution of means of hours from samples of size 2 is 38.125 as well
# standard error of hours from sampling distribution, uses original dataset of hours
hoursSE <- sqrt(sum((hoursMeans - hoursMean)^2/length(meansHours))) # brute force method
hoursSECLT <- sqrt(hrsSD^2/2*(1-2/length(df$hours))) # CLT method with finite population correction
# as sample size larger, se smaller
hist(hoursMeans)
# Stratified Examples of Calculating Mean and Variance
# One unit randomly selected from each gender
# 12 possible samples
fem <- subset(df, gender==0)
male <- subset(df, gender==1)
fem
counter = 1
means <- numeric(12)
for(i in fem[,'hours']){
for(j in male[,'hours']){
means[counter] = (2/8*i+6/8*j)
counter = counter + 1
}
}
genderMean <- mean(means)
genderSE <- sqrt(sum((means-stratMean)^2*(1/12)))
library(gdata)
df <- read.xls('~/desktop/lab3_data.xlsx')
df$X <- NULL
df <- head(df, 9)
# Begin Exercise 1
dfEx1 <- head(df, 8)
combos <- combn(dfEx1$act_inc, 2)
# dfIDs <- data.frame(one=combosID[1,], two = combosID[2,])
# combosID <- combn(dfEx1$ID,2) # for excel to word copy paste
# write.csv(dfIDs,'~/desktop/combos.csv')
means <- colMeans(combos)
vars <- apply(combos, 2, var)
hist(means)
abline(v=mean(means),col='red',lwd=2)
hist(vars)
abline(v=mean(vars),col='red',lwd=2)
mean(means)
mean(vars)
#write.csv(dfOut,'~/desktop/dfOut.csv')
# Calculate Population Mean and Variance
mean(dfEx1$act_inc) == mean(means)
var(dfEx1$act_inc) == mean(vars)
# unbiased estimations of means, equal the population parameters
# Begin Exercise 2, must include tax payer 9
# total size of sample is 9, must weigh strata selections appropriately, 28 combinations with extra obs for means
strMeans <- (means*(8/9))+(200*(1/9)) # sample 9 is always 200, always in sample, representing 1/9 wt
mean(df$act_inc)
mean(strMeans) == mean(df$act_inc)
sum((strMeans-mean(df$act_inc))^2)
var(df$act_inc)
sum((strMeans-mean(df$act_inc))^2)/28
sd(df$act_inc)
sqrt(sum((strMeans-mean(df$act_inc))^2)/28)
sd(df$act_inc)
mean(dfEx1$act_inc)
mean(dfEx1$act_inc)*(8/9)
mean(dfEx1$act_inc)*(8/9)+(200*(1/9))
sd(df$act_inc)
sqrt(sum((strMeans-mean(dfEx1$act_inc)*(8/9)+(200*(1/9)))^2)/28)
strMeans
genderMean <- mean(means)
genderSE <- sqrt(sum((means-genderMean)^2*(1/12)))
genderSE
hours <- c(27,55,24,100,18,60,0,21)
born <- c(0,1,0,1,0,1,1,1) # Born in US = 1
gender <- c(1,1,0,0,1,1,1,1) # Male = 1
grad <- c(1,0,1,0,1,0,1,1) # Graduate = 1
df <- data.frame(hours=hours, born=born, gender=gender, grad=grad)
# statistics for hours taken from sample
hrsMean <- mean(df$hours) # mean of hours
hrsSD <- sd(df$hours) # standard deviation of hours
# SAMPLING DISTRIBUTION OF PROPORTIONS
# Proportions of Born in US
# combinations of proportions from born vector
bornMean <- mean(df$born)
meansBorn <- colMeans(combn(df$born,2)) # means of all combinations of 1,0 across students
meanBorn <- mean(colMeans(combn(df$born,2))) # mean of sampling distribution of proportions
meanBorn == bornMean
hist(meansBorn)
# sample proportion Variance
# take probability of success * 1-probability success*N/N-1
seBornBrute <- sqrt(sum((meansBorn-bornMean)^2*1/28)) # brute force method of obtaining SE from Sampling Dist of Proportion
varBorn = bornMean*(1-bornMean)*(length(df$born)/(length(df$born)-1)) # CLT method, variance depends on proportion (bornMean)
seBornCLT = sqrt(varBorn/2*(1-2/8)) # sqrt(variance of proportion/2 * finite population correction)
seBornCLT == seBornBrute
# Sample Hours Sampling Distribution
# take all combinations of sample of 2 from population of 8
hoursMeans <- colMeans(combn(df$hours,2))
hoursMean <- mean(colMeans(combn(df$hours,2))) # mean of sampling distribution for total distribution
meanHours == hrsMean # mean is unbiased estimator
hist(meansHours)
abline(v=meanHours, col='red')
# mean of sampling distribution of means of hours from samples of size 2 is 38.125 as well
# standard error of hours from sampling distribution, uses original dataset of hours
hoursSE <- sqrt(sum((hoursMeans - hoursMean)^2/length(meansHours))) # brute force method
hoursSECLT <- sqrt(hrsSD^2/2*(1-2/length(df$hours))) # CLT method with finite population correction
# as sample size larger, se smaller
hist(hoursMeans)
# Stratified Examples of Calculating Mean and Variance
# One unit randomly selected from each gender
# 12 possible samples
fem <- subset(df, gender==0)
male <- subset(df, gender==1)
# weight the results since pulling from stratified source
# female represents herself and 1 other, so 2 and male represents himself and 6 others, so 8
# divide by 8
counter = 1
means <- numeric(12)
for(i in fem[,'hours']){
for(j in male[,'hours']){
means[counter] = (2/8*i+6/8*j)
counter = counter + 1
}
}
genderMean <- mean(means)
genderSE <- sqrt(sum((means-genderMean)^2*(1/12)))
genderSE
hoursSE
hoursSECLT
sqrt(sum((strMeans-mean(strMeans))^2)/12)
sum((strMeans-mean(strMeans))^2)/12
var(strMeans)
sum((strMeans-mean(strMeans))^2/12)
sum((strMeans-mean(strMeans))^2*(1/28))
install.packages("downloader")
URL <- "http://bit.ly/ijXJgDh"
temp <- tempfile()
download.file(URL, temp)
URL <- "http://bit.ly/1jXJgDh"
temp <- tempfile()
download.file(URL, temp)
UDSData <- read.csv(gzfile(temp,"uds_summary.csv"))
names(UDSData)
unlink(temp)
setwd('~/desktop/Personal/DataScience/Classes/Doing_Data_Science/')
# get data from URL using downloader
URL <- "https://raw.githubusercontent.com/thoughtfulbloke/faoexample/master/appleorange.csv"
df <- downloader::download(URL,'appleorange.csv')
df
df
URL <- "https://raw.githubusercontent.com/thoughtfulbloke/faoexample/master/appleorange.csv"
df <- downloader::download(URL,'appleorange.csv')
df
setwd('~/desktop/Personal/DataScience/Classes/Doing_Data_Science/Data')
URL <- "https://raw.githubusercontent.com/thoughtfulbloke/faoexample/master/appleorange.csv"
df <- downloader::download(URL,'appleorange.csv') # downloader actually leaves the file in your current working directory
list.files()
UDSData
nrow(UDSData)
write.csv('UDSData.csv')
write.csv(UDSData,'UDSData.csv')
df <- read.csv('~/desktop/appleorange.csv', stringsAsFactors = FALSE)
df <- read.csv('appleorange.csv', stringsAsFactors = FALSE)
head(df)
str(df)
df <- read.csv('appleorange.csv', stringsAsFactors = FALSE, header=FALSE)
head(df)
str(df)
names(df) <- c("country","countryNumber", "products", "productNumber","tonnes","year")
df
head(df)
df <- df[3:700,]
str(df)
df$countryNumber <- as.integer(df$countryNumber)
str(df)
fslines <- which(df$country == "Food supply quantity (tonnes) (tonnes)")
fslines
subset(df, !fslines)
subset(df, ~fslines)
f[,,drop=fsline]
df[,,drop=fslines]
df[:,,drop=fslines]
df[c(-fslines),]
nrow(df[c(-fslines),])
nrow(df[c(-fslines),])
nrow(fslines)
fslines
df[-fslines,]
nrow(df[-fslines,])
df <- df[c(-fslines),]
head(df)
str(df)
df$tonnes <-gsub("\xca","",df$tonnes)
str(df)
df$tonnes <-gsub("tonnes\\(\\)","",df$tonnes)
str(df)
df$tonnes <-gsub("tonnes\(\)","",df$tonnes)
df$tonnes <-gsub("tonnes\\(\\)","",df$tonnes)
str(df)
df$tonnes <-gsub("tonnes \\(\\)","",df$tonnes)
str(df)
head(df)
df$tonnes <- as.numeric(df$tonnes)
head(df)
df <- read.csv('appleorange.csv', stringsAsFactors = FALSE, header=FALSE)
head(df)
names(df) <- c("country","countryNumber", "products", "productNumber","tonnes","year")
df <- df[3:700,]
str(df)
head(df)
df$countryNumber <- as.integer(df$countryNumber)
fslines <- which(df$country == "Food supply quantity (tonnes) (tonnes)")
head(df)
df <- df[c(-fslines),]
str(df)
head(df)
df$tonnes <-gsub("\xca","",df$tonnes)
df$tonnes <-gsub(", tonnes \\(\\)","",df$tonnes)
head(df)
df$tonnes <- as.numeric(df$tonnes)
df$year <- 2009
apples <-df[df$productNumber == 2617, c(1,2,5)]
apples
head(df)
oranges <-df[df$productNumber == 2611, c(1,2,5)]
names(oranges)[3] = 'oranges'
head(oranges)
nrow(df)
df <- read.csv('appleorange.csv', stringsAsFactors = FALSE, header=FALSE)
names(df) <- c("country","countryNumber", "products", "productNumber","tonnes","year")
df <- df[3:700,]
str(df)
nrow(df)
delete(df,7)
df <- read.csv('appleorange.csv', stringsAsFactors = FALSE, header=FALSE)
names(df) <- c("country","countryNumber", "products", "productNumber","tonnes","year")
df <- df[3:700,]
str(df)
df$countryNumber <- as.integer(df$countryNumber)
fslines <- which(df$country == "Food supply quantity (tonnes) (tonnes)")
df <- df[c(-fslines),]
str(df)
# clean up tonnes
df$tonnes <-gsub("\xca","",df$tonnes)
df$tonnes <-gsub(", tonnes \\(\\)","",df$tonnes)
df$tonnes <- as.numeric(df$tonnes)
df$year <- 2009
df
head(df)
apples <-df[df$productNumber == 2617, c(1,2,5)]
names(apples)[3] = 'apples'
unique(apples$country)
unique(apples$oranges)
oranges <-df[df$productNumber == 2611, c(1,2,5)]
names(oranges)[3] = 'oranges'
unique(apples$oranges)
unique(oranges$country)
setwd('~/desktop/Personal/DataScience/Classes/Doing_Data_Science/Data')
# get data from URL using downloader
URL <- "https://raw.githubusercontent.com/thoughtfulbloke/faoexample/master/appleorange.csv"
df <- downloader::download(URL,'appleorange.csv') # downloader actually leaves the file in your current working directory
list.files()
# use strings as factors FALSE to help parse the data more effectively
df <- read.csv('appleorange.csv', stringsAsFactors = FALSE, header=FALSE)
names(df) <- c("country","countryNumber", "products", "productNumber","tonnes","year")
df <- df[3:700,]
str(df)
df$countryNumber <- as.integer(df$countryNumber)
fslines <- which(df$country == "Food supply quantity (tonnes) (tonnes)")
df <- df[c(-fslines),]
str(df)
# clean up tonnes
df$tonnes <-gsub("\xca","",df$tonnes)
df$tonnes <-gsub(", tonnes \\(\\)","",df$tonnes)
df$tonnes <- as.numeric(df$tonnes)
df$year <- 2009
apples <-df[df$productNumber == 2617, c(1,2,5)]
names(apples)[3] = 'apples'
oranges <-df[df$productNumber == 2611, c(1,2,5)]
names(oranges)[3] = 'oranges'
head(oranges)
oranges[oranges$country == 'Myanmar']
oranges[oranges$country == 'Suriname']
oranges[oranges$country == 'Chad']
oranges$country == 'Chad'
oranges[oranges$country == 'Chad']
oranges[oranges$country == 'Chad',]
oranges[oranges$country == 'Suriname',]
oranges[oranges$country == 'Turkminestan',]
oranges[oranges$country == 'Turkmenistan',]
dfClean <- merge(apples, oranges, by = "countrynumber", all=TRUE)
dfClean <- merge(apples, oranges, by = "countryNumber", all=TRUE)
str(dfClean)
library(reshape2)
dfClean2 <- dcast(df[,c(1:3,5)], formula=country+countryNumber ~ products, value.var="tonnes")
dfClean2
head(df)
head(dfClean2)
dfClean2[!complete.cases(dfClean2),]
table(df$country)[table(df$country) == 1]
table(df$country)
head(df$country)
head(df)
table(df$country)
