q()
install.packages("KernSmooth")
library(KernSmooth)
install.packages("arules")
install.packages("arulesViz")
install.packages("ggplot2")
.libPaths(())
.libPaths()
library('arules')
library(arulesViz)
head(titanic.raw)
load("/Users/patrickcorynichols/Desktop/titanic2.raw.rdata")
head(titanic.raw)
install.packages(Matrix)
load("/Users/patrickcorynichols/Desktop/titanic2.raw.rdata")
rules = apriori(titanic.raw)
?apriori
inspect(rules)
rules <- apriori(titanic.raw, parameer=list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"), control=list(verbose=F))
rules <- apriori(titanic.raw, parameer=list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"), control=list(verbose=F))
rules <- apriori(titanic.raw, parameer=list(minlen=2, supp=0.005, conf=0.8),appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"), control=list(verbose=F))
rules <- apriori(titanic.raw, parameter=list(minlen=2, supp=0.005, conf=0.8),appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"), control=list(verbose=F))
rules <- apriori(titanic.raw, parameter=list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"), control=list(verbose=F))
rules_sorted <- sort(rules, by="lift")
rules_sorted
inspect(rules_sorted)
subset_matrix <- is.subset(rules_sorted,rules_sorted)
inpsect(subset_matrix)
inspect(subset_matrix)
subset_matrix
?colSums
?colSums()
which(redundant)
inspect(rules.pruned)
load("/Users/patrickcorynichols/Desktop/titanic2.raw.rdata")
inspect(rules_pruned)
load("/Users/patrickcorynichols/Desktop/titanic2.raw.rdata")
head(titanic.raw)
attach(titanic.raw)
library(Matrix)
library(arules)
rules = apriori(titanic.raw)
inspect(rules)
rules <- apriori(titanic.raw, parameter=list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"),
control=list(verbose=F))
rules_sorted <- sort(rules, by="lift")
# find redundant rules
subset_matrix <- is.subset(rules_sorted,rules_sorted)
subset_matrix[lower.tri(subset_matrix,diag=T)] <- NA
redundant <- colSums(subset_matrix,na.rm=T) >=1
which(redundant)
rules_pruned <= rules.sorted[!redundant]
inspect(rules_pruned)
rules_pruned <= rules.sorted[!redundant]
rules_pruned <- rules.sorted[!redundant]
inspect(rules_pruned)
load("/Users/patrickcorynichols/Desktop/titanic2.raw.rdata")
head(titanic.raw)
attach(titanic.raw)
library(Matrix)
library(arules)
rules = apriori(titanic.raw)
inspect(rules)
rules <- apriori(titanic.raw, parameter=list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"),
control=list(verbose=F))
rules_sorted <- sort(rules, by="lift")
# find redundant rules
subset_matrix <- is.subset(rules_sorted,rules_sorted)
subset_matrix[lower.tri(subset_matrix,diag=T)] <- NA
redundant <- colSums(subset_matrix,na.rm=T) >=1
which(redundant)
rules_pruned <- rules.sorted[!redundant]
inspect(rules_pruned)
load("/Users/patrickcorynichols/Desktop/titanic2.raw.rdata")
head(titanic.raw)
attach(titanic.raw)
library(Matrix)
library(arules)
rules = apriori(titanic.raw)
inspect(rules)
rules <- apriori(titanic.raw, parameter=list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"),
control=list(verbose=F))
rules_sorted <- sort(rules, by="lift")
# find redundant rules
subset_matrix <- is.subset(rules_sorted,rules_sorted)
subset_matrix[lower.tri(subset_matrix,diag=T)] <- NA
redundant <- colSums(subset_matrix,na.rm=T) >=1
which(redundant)
rules_pruned <- rules_sorted[!redundant]
inspect(rules_pruned)
load("/Users/patrickcorynichols/Desktop/titanic2.raw.rdata")
head(titanic.raw)
attach(titanic.raw)
library(Matrix)
library(arules)
library(arulesViz)
rules = apriori(titanic.raw)
inspect(rules)
rules <- apriori(titanic.raw, parameter=list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"),
control=list(verbose=F))
rules_sorted <- sort(rules, by="lift")
# find redundant rules
subset_matrix <- is.subset(rules_sorted,rules_sorted)
subset_matrix[lower.tri(subset_matrix,diag=T)] <- NA
redundant <- colSums(subset_matrix,na.rm=T) >=1
which(redundant)
rules_pruned <- rules_sorted[!redundant]
inspect(rules_pruned)
plot(rules)
load("/Users/patrickcorynichols/Desktop/titanic2.raw.rdata")
head(titanic.raw)
attach(titanic.raw)
library(Matrix)
library(arules)
library(arulesViz)
rules = apriori(titanic.raw)
inspect(rules)
rules <- apriori(titanic.raw, parameter=list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"),
control=list(verbose=F))
rules_sorted <- sort(rules, by="lift")
# find redundant rules
subset_matrix <- is.subset(rules_sorted,rules_sorted)
subset_matrix[lower.tri(subset_matrix,diag=T)] <- NA
redundant <- colSums(subset_matrix,na.rm=T) >=1
which(redundant)
rules_pruned <- rules_sorted[!redundant]
inspect(rules_pruned)
plot(rules_pruned)
lower.tri()?
?lower.tri
?colSums
redundant
which(redundant)
plot(rules_pruned)
plot(rules_pruned, method="grouped")
plot(rules_sorted, method="grouped")
load("/Users/patrickcorynichols/Desktop/titanic2.raw.rdata")
library(arulesViz)
load("/Users/patrickcorynichols/Desktop/titanic2.raw.rdata")
head(titanic.raw)
attach(titanic.raw)
library(Matrix)
library(arules)
library(arulesViz)
rules = apriori(titanic.raw)
inspect(rules)
rules <- apriori(titanic.raw, parameter=list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"),
control=list(verbose=F))
rules_sorted <- sort(rules, by="lift")
# find redundant rules
subset_matrix <- is.subset(rules_sorted,rules_sorted)
subset_matrix[lower.tri(subset_matrix,diag=T)] <- NA
redundant <- colSums(subset_matrix,na.rm=T) >=1
which(redundant)
rules_pruned <- rules_sorted[!redundant]
inspect(rules_sorted)
plot(rules_sorted)
plot(rules_sorted, method="grouped")
load("/Users/patrickcorynichols/Desktop/titanic2.raw.rdata")
head(titanic.raw)
attach(titanic.raw)
library(Matrix)
library(arules)
library(arulesViz)
rules = apriori(titanic.raw)
inspect(rules)
rules <- apriori(titanic.raw, parameter=list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"),
control=list(verbose=F))
rules_sorted <- sort(rules, by="lift")
# find redundant rules
subset_matrix <- is.subset(rules_sorted,rules_sorted)
subset_matrix[lower.tri(subset_matrix,diag=T)] <- NA
redundant <- colSums(subset_matrix,na.rm=T) >=1
which(redundant)
rules_pruned <- rules_sorted[!redundant]
inspect(rules_sorted)
plot(rules_sorted)
plot(rules.sorted, method="grouped", measure = 'confidence', shading='lift')
plot(rules_sorted, method="grouped", measure = 'confidence', shading='lift')
plot(rules_sorted, method="parallel")
plot(rules_sorted, method="grouped", measure = 'confidence', shading='lift')
plot(rules_sorted, method="paracoord")
plot(rules_sorted, method="matrix")
load("/Users/patrickcorynichols/Desktop/titanic2.raw.rdata")
head(titanic.raw)
attach(titanic.raw)
library(Matrix)
library(arules)
library(arulesViz)
rules = apriori(titanic.raw)
inspect(rules)
rules <- apriori(titanic.raw, parameter=list(minlen=2, supp=0.05, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"),
control=list(verbose=F))
rules_sorted <- sort(rules, by="lift")
# find redundant rules
subset_matrix <- is.subset(rules_sorted,rules_sorted)
subset_matrix[lower.tri(subset_matrix,diag=T)] <- NA
redundant <- colSums(subset_matrix,na.rm=T) >=1
which(redundant)
rules_pruned <- rules_sorted[!redundant]
inspect(rules_sorted)
plot(rules_sorted)
plot(rules_sorted, method="grouped", measure = 'confidence', shading='lift')
plot(rules_sorted, method="paracoord")
plot(rules_sorted, method="matrix")
plot(rules_sorted, method="matrix", measure='confidence', shading='lift')
plot(rules_sorted, method="paracoord",measure='confidence', shading='lift')
r <- c(1,2,3)
r
r <- [23,54,45,56,21,68,45]
r <- c[23,54,45,56,21,68,45]
r <- c(23,54,45,56,21,68,45)
t.test(r)
t <- read.csv('height.csv')
t <- read.csv('Height.csv')
t <- read.csv('/Desktop/Height.csv')
ls
pwd
getwd
getwd()
t <- read.csv('Desktop/Height.csv')
t
library("arules", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("arulesViz", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
rt
t
t.Height
t['Height']
t['Height']
t
t[t['Height']]
t['Height']
t[t['Height']>6]
t['Sport']
t['Sport'] == 'Football'
t[t['Sport'] == 'Football']['Height']
t[t['Sport'] == 'Football']
t['Height'][t['Sport'] == 'Football']
t.test(t['Height'][t['Sport'] == 'Football'], t['Height'][t['Sport'] == 'Basketball'])
t.test(t['Height'][t['Sport'] == 'Football'], t['Height'][t['Sport'] == 'Basketball'], conf.level=.99)
t
t
t.test(t['Height'][t['Sport'] == 'Football'], t['Height'][t['Sport'] == 'Basketball'], conf.level=.99, var.equal = TRUE)
sam <- c(-3,-2,1,-2,0)
andy <- c(1,0,2,1,1)
t.test(sam, sandy)
t.test(sam, andy)
t.test(sam, andy, alternative="less")
t.test(sam, andy, alternative="less",var.equal=TRUE)
t.test(sam, andy, alternative="less",var.equal=TRUE, conf.level=.99)
t.test(sam, andy, alternative="less",var.equal=TRUE, conf.level=.90)
t.test(sam, andy, alternative="less",var.equal=TRUE, conf.level=.75)
sam.mean()
mean(sam)
sam
andy
t.test(sam, andy, alternative="greater",var.equal=TRUE, conf.level=.75)
t.test(sam, andy, alternative=c("greater","less"),var.equal=TRUE, conf.level=.75)
t.test(sam, andy, alternative="greater",var.equal=TRUE, conf.level=.75)
for i in x:
t.test(sam, andy, alternative="less",var.equal=TRUE, conf.level=.75)
t.test(sam, andy, alternative="less",var.equal=TRUE, conf.level=.75, mu=-1)
t.test(sam, andy, alternative="less",var.equal=TRUE, conf.level=.75, mu=0)
t.test(sam, andy, alternative="less",var.equal=TRUE, conf.level=.75)
t.test(sam, andy, alternative="two.sided",var.equal=TRUE, conf.level=.75)
beg = c(28,33,35,29,28)
end = c(30,32,37,30,38)
t.test(beg, end, alternative = "less")
t.test(beg, end, alternative = "less", conf.level = .98)
t.test(beg, end, alternative = "less", conf.level = .98, var.equal = TRUE)
t.test(beg, end, alternative = "greater", conf.level = .98, var.equal = TRUE)
t.test(beg, end, alternative = "less", conf.level = .98, var.equal = TRUE)
read.csv('sunspotsfinal.csv')
read.csv('/desktop/sunspotsfinal.csv')
read.csv('~/desktop/sunspotsfinal.csv')
spots = read.csv('~/desktop/sunspotsfinal.csv')
spots
t.test(spots['Diameter'])
t.test(spots['Diameter'], alternative = "greater", mu = 40)
height
getwd()
cd
cd()
height
height = read.csv('~/desktop/Height.csv')
height
Height
height
bball = height[height$Sport='Basketball',]
bball = height[height$Sport=='Basketball',]
bball
bball = height[height$Sport=='Basketball',][height$Height]
bball = height[height$Sport=='Basketball',][height$Height]
bball
bball[height]
bball[Height]
bball = height[height$Sport=='Basketball',][Height]
bball = height[height$Sport=='Basketball',]['Height']
bball
fball = height[height$Sport=='Football',]['Height']
fball
bball
t.test(fball, bball)
t.test(fball, bball, var.equal = TRUE)
height
t.test(fball, bball, var.equal = TRUE)
install.packages("pdftools")
library(pdftools)
download.file("http://arxiv.org/pdf/1403.2805.pdf", "1403.2805.pdf", mode = "wb")
txt <- pdf_text("1403.2805.pdf")
txt
theft = read.csv('~/desktop/Theft.csv')
theft
cor(theft$Fire,theft$Theft)
rcorr()
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
rcorr(theft)
rcorr(theft$Fire)
rcorr(as.matrix(theft))
rcorr(as.matrix(theft), type="pearson")
as.matrix(theft)
rcorr(as.matrix(theft), type="pearson")
cor.test(theft$Fire,theft$Theft)
rgr = lm(Fire ~ Theft, data=theft)
rgr
plot(theft$Fire ~ theft$Theft)
predict.lm(rgr, c(41))
rgr
rgr = lm(Theft ~ Fire, data=theft)
rgr
summary(rgr)
rgr.out()
rgr.out
rgr
resid(rgr)
plot(theft$Fire, resid(rgr))
plot(theft$Fire, resid(rgr))
abline(0,0)
theft
rgr
setwd('~/Desktop/Personal/DataScience/Classes/Doing_Data_Science/R_Work/')
source('LOOPS_CONTROL.R')
read.csv('~/desktop/data.csv')
setwd('~/Desktop/Personal/DataScience/Classes/Doing_Data_Science/R_Work/')
source('LOOPS_CONTROL.R') # source R script
df <- read.csv('~/desktop/data.csv')
mean(df$col2)
summary(df$col2)
df$Col2
summary(df$Col2)
mean(df$Col2)
setwd('~/Desktop/Personal/DataScience/Classes/Doing_Data_Science/R_Work/')
source('LOOPS_CONTROL.R') # source R script
df <- read.csv('~/desktop/data.csv')
mean(df$col2)
summary(df$col2)
setwd('~/Desktop/Personal/DataScience/Classes/Doing_Data_Science/R_Work/')
source('LOOPS_CONTROL.R') # source R script
df <- read.csv('~/desktop/data.csv')
print(df)
mean(df$col2)
summary(df$col2)
df$Col2
mean(df$Col2)
mean(df['Col2'])
df['Col2']
df['Col2'].values
df['Col2']
df.kernel()
df['col2']
df['Col2']
df['Col2']['Col2']
df$Col2
setwd('~/Desktop/Personal/DataScience/Classes/Doing_Data_Science/R_Work/')
source('LOOPS_CONTROL.R') # source R script
df <- read.csv('~/desktop/data.csv')
print(df)
summary(df$col2)
setwd('~/Desktop/Personal/DataScience/Classes/Doing_Data_Science/R_Work/')
source('LOOPS_CONTROL.R') # source R script
df <- read.csv('~/desktop/data.csv')
print(df)
summary(as.numeric(df$col2))
as.numeric(df$Col2)
df <- read.csv('~/desktop/data.csv')
df
setwd('~/Desktop/Personal/DataScience/Classes/Doing_Data_Science/R_Work/')
source('LOOPS_CONTROL.R') # source R script
df <- read.csv('~/desktop/data.csv')
print(df)
summary(as.numeric(df$col2))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: test chunk
setwd('~/Desktop/Personal/DataScience/Classes/Doing_Data_Science/R_Work/')
source('LOOPS_CONTROL.R') # source R script
df <- read.csv('~/desktop/data.csv')
print(df)
summary(df$col2)
setwd('~/Desktop/Personal/DataScience/Classes/Doing_Data_Science/R_Work/')
source('LOOPS_CONTROL.R') # source R script
df <- read.csv('~/desktop/data.csv')
print(df)
summary(df$col2)
summary(c(1,2,3,45))
setwd('~/Desktop/Personal/DataScience/Classes/Doing_Data_Science/R_Work/')
source('LOOPS_CONTROL.R') # source R script
df <- read.csv('~/desktop/data.csv')
vec <- df$Col2
summary(vec)
summary(c(1,2,3,45))
list.files()
cwd()
pwd()
getwd()
ls
getwd()
