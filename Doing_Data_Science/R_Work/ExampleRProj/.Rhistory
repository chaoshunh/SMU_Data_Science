# select fourth value from second column (dist) in cars df
cars[4,2]
#  can also include a vector of columns to select from
cars[4,c("speed","dist")]
install.packages('formatR')
history()
?mean
workspace()
summary(mean)
numvec
numvec <- c(2.8, 2, 14.8)
mean(numvec)
summary(numvec)
class(numvec)
section.a <- c(3.13,2.75,2.15,3.92,1.88,'Final Grades')
section.a[-1]
section.a <- c(3.13,2.75,2.15,3.92,1.88,'Final Grades')
# remove final grades
section.a[-6]
section.a <- c(3.13,2.75,2.15,3.92,1.88,'Final Grades')
# remove final grades
section.a <- section.a[-6]
sd(section.a)
sessionInfo()
library("arules", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("arulesViz", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:arulesViz", unload=TRUE)
detach("package:arules", unload=TRUE)
newNumeric[1:3]
## R OBJECTS
# get help
?mean
# vectors, fundamental data type in R
# all R objects composed of vectors
numvec <- c(2.8, 2, 14.8)
charvec <- c("Albania","Botswana","Cambodia")
# cbind appends columns into a matrix, all will be same type, auto-str conversion happens here
# matrices are vectors with columns as well as rows
matrixObj <- cbind(numvec,charvec)
# this is an R list, lists take different object types
l <- list('test',1,2,3)
print(matrixObj)
# data frames allow for different types of data
df<- data.frame(numvec,charvec)
# can use logical indexing
class(df['numvec'])
# keeps df intact
# or use $ sign
class(df$numvec)
# returns vector
# get col names of df
names(df)
# change names of rows directly, instead of leaving index
row.names(df) <- c("Idx","One","Two")
print(row.names(df))
# get the mean of a vector
mean(numvec)
# get five # summ of a vector
summary(numvec)
# get data type of vector (class)
class(numvec)
section.a <- c(3.13,2.75,2.15,3.92,1.88,'Final Grades')
# remove final grades
section.a <- section.a[-6]
sd(section.a)
#### Component Selection and Subscripts
# R does NOT start at zero like Python, [1] is indeed the first element
newNumeric <- df$numvec
newNumeric
newNumeric[1:3]
# streamline code by using attach and with
# attach attaches a database to R's search path
attach(cars)
# now we can just use speed and dist as set vars
speed
# get the top 6 values from speed by using head(x)
head(speed)
# last 6 values from dist
tail(dist)
# when done, detach cars
detach(cars)
# can also use with to do roughly the same but contain the assignment to a block
with(df,{
mean(numvec)
}
)
### SELECTING WITH SUBSCRIPTS
# denoted by [,], first part is rows, second cols
head(cars)
# select first value from speed columns in cars df
cars[1,'speed']
# select third through seventh values in speed df, both columns
cars[3:7, ]
# select fourth value from second column (dist) in cars df
cars[4,2]
#  can also include a vector of columns to select from
cars[4,c("speed","dist")]
sessionInfo()
newNumeric[1:3]
newNumeric[c(1,3),]
newNumeric
newNumeric[c(1,3)]
section.a <- c(3.13, 2.75, 2.15, 3.92, 1.88, 'Final Grades')
# remove final grades, or select everything except sixth position
section.a <- section.a[-6]
sd(section.a)
mean(section.a)
section.a <- c(3.13, 2.75, 2.15, 3.92, 1.88, 'Final Grades')
# remove final grades, or select everything except sixth position
section.a <- section.a[-6]
sd(section.a)
mean(section.a)
section.a
mean(section.a)
class(section.a)
section.a <- section.a[-6].as_numeric()
section.a <- as.numeric(section.a[-6])
sd(section.a)
section.a
section_a <- c(3.13, 2.75, 2.15, 3.92, 1.88, 'Final Grades')
# remove final grades, or select everything except sixth position
section.a <- as.numeric(section.a[-6])
sd(section_a)
mean(section_a)
section_a
section_a <- c(3.13, 2.75, 2.15, 3.92, 1.88, 'Final Grades')
# remove final grades, or select everything except sixth position
section_a <- as.numeric(section.a[-6])
sd(section_a)
mean(section_a)
str(stackloss)
help(stackloss)
dim(stackloss)
str(stackloss, vec.len)
str(stackloss, nchar.max=128)
str(stackloss, nchar.max=12)
head(stackloss, 10)
10L
-6L
## READING DATA IN
site <- "http://www.users.muohio.edu/hughesmr/sta333/univadmissions.txt"
df <- read_table(site, header=TRUE)
## READING DATA IN
site <- "http://www.users.muohio.edu/hughesmr/sta333/univadmissions.txt"
df <- read.table(site, header=TRUE)
str(df)
## READING DATA IN
site <- "http://www.users.muohio.edu/hughesmr/sta333/univadmissions.txt"
df <- read.table(site, header=TRUE)
str(df)
head(uadata)
head(df)
## READING DATA IN
site <- "http://www.users.muohio.edu/hughesmr/sta333/univadmissions.txt"
df <- read.table(site, header=TRUE)
print(str(df))
print(head(df))
names(uadata)
names(df)
## READING DATA IN
site <- "http://www.users.muohio.edu/hughesmr/sta333/univadmissions.txt"
df <- read.table(site, header=TRUE)
print(str(df))
print(head(df))
names(df)
names(df) <- c("id","GPA_First_Yr","hs.pct","act","year")
print(names(df))
## READING DATA IN
# read data in from a text file on a website
site <- "http://www.users.muohio.edu/hughesmr/sta333/univadmissions.txt"
df <- read.table(site, header=TRUE)
print(str(df))
print(head(df))
names(df)
# change names of columns
names(df) <- c("id","GPA_First_Yr","hs.pct","act","year")
print(names(df))
hs.pct <- df$hs.pct
length(hs.pct)
hist(hs.pct)
hs.pct
hist(log(hs.pct))
hist(hs.pct)
df
hist(df$GPA_First_Yr)
hist(log(df$GPA_First_Yr))
hist(sqrt(df$GPA_First_Yr))
hist(sqrt(1/df$GPA_First_Yr))
hist((1/df$GPA_First_Yr))
df[-c(1,2),]
df[80:88,]
df[c('81','85','87'),]
getwd()
getwd()
setwd('~/desktop')
getwd()
olivera <- read.csv('olivera.csv')
olivera
olivera$Full.Name.split()
split(olivera$Full.Name)
split(olivera$Full.Name.' ')
split(olivera$Full.Name,' ')
n <- 10; nn <- 100
g <- factor(round(n * runif(n * nn)))
g
n <- 10; nn <- 100
g <- factor(round(n * runif(n * nn)))
x <- rnorm(n * nn) + sqrt(as.numeric(g))
xg <- split(x, g)
boxplot(xg, col = "lavender", notch = TRUE, varwidth = TRUE)
sapply(xg, length)
sapply(xg, mean)
# LOGICAL VALUES, BOOLEANS, AND EXPRESSIONS
gpa_section_a <- c(3.13, 3.55, 2.92, 2.73, 3.00, 3.18, 2.66, 3.76)
# LOGICAL VALUES, BOOLEANS, AND EXPRESSIONS
gpa_section_a <- c(3.13, 3.55, 2.92, 2.73, 3.00, 3.18, 2.66, 3.76)
class(gpa_section_a)
mean(gpa_section_a)
# LOGICAL VALUES, BOOLEANS, AND EXPRESSIONS
gpa_section_a <- c(3.13, 3.55, 2.92, 2.73, 3.00, 3.18, 2.66, 3.76)
class(gpa_section_a)
mean(gpa_section_a)
gpa_section_a > 3.0
# LOGICAL VALUES, BOOLEANS, AND EXPRESSIONS
gpa_section_a <- c(3.13, 3.55, 2.92, 2.73, 3.00, 3.18, 2.66, 3.76)
class(gpa_section_a)
mean(gpa_section_a)
gpa_section_a > 3.0
gpa_section_a >= 3.0
# BOOLEANS AND EXPRESSIONS
gpa_section_a <- c(3.13, 3.55, 2.92, 2.73, 3.00, 3.18, 2.66, 3.76)
class(gpa_section_a)
mean(gpa_section_a)
gpa_section_a > 3.0
gpa_section_a >= 3.0
gpa_section_a[gpa_section_a>3.0]
# BOOLEANS AND EXPRESSIONS
gpa_section_a <- c(3.13, 3.55, 2.92, 2.73, 3.00, 3.18, 2.66, 3.76)
class(gpa_section_a)
mean(gpa_section_a)
# returns vector or array of booleans
gpa_section_a > 3.0
gpa_section_a >= 3.0
# logical indexing like pandas
gpa_section_a[gpa_section_a>3.0]
# handling NAs (missing values)
gpa_section_a <- c(3.13, 3.55, 2.92, 2.73, 3.00, 3.18, 2.66, 3.76, NA)
gpa_section_a
mean(gpa_section_a)
mean(gpa_section_a, na.rm=T)
# BOOLEANS AND EXPRESSIONS
gpa_section_a <- c(3.13, 3.55, 2.92, 2.73, 3.00, 3.18, 2.66, 3.76)
class(gpa_section_a)
mean(gpa_section_a)
# returns vector or array of booleans
gpa_section_a > 3.0
gpa_section_a >= 3.0
# logical indexing like pandas
gpa_section_a[gpa_section_a>3.0]
# handling NAs (missing values)
gpa_section_a <- c(3.13, 3.55, 2.92, 2.73, 3.00, 3.18, 2.66, 3.76, NA)
# run mean function, exclude NAs
mean(gpa_section_a, na.rm=T)
# find all of the NAs
which(is.na(gpa_section_a))
# BOOLEANS AND EXPRESSIONS
gpa_section_a <- c(3.13, 3.55, 2.92, 2.73, 3.00, 3.18, 2.66, 3.76)
class(gpa_section_a)
mean(gpa_section_a)
# returns vector or array of booleans
gpa_section_a > 3.0
gpa_section_a >= 3.0
# logical indexing like pandas
gpa_section_a[gpa_section_a>3.0]
# handling NAs (missing values)
gpa_section_a <- c(3.13, 3.55, 2.92, 2.73, 3.00, 3.18, 2.66, 3.76, NA)
# run mean function, exclude NAs
mean(gpa_section_a, na.rm=T)
# find all of the NA indices
which(is.na(gpa_section_a))
mean(gpa_section_a > 3.0)
# BOOLEANS AND EXPRESSIONS
gpa_section_a <- c(3.13, 3.55, 2.92, 2.73, 3.00, 3.18, 2.66, 3.76)
class(gpa_section_a)
mean(gpa_section_a)
# returns vector or array of booleans
gpa_section_a > 3.0
gpa_section_a >= 3.0
# logical indexing like pandas
gpa_section_a[gpa_section_a>3.0]
# handling NAs (missing values)
gpa_section_a <- c(3.13, 3.55, 2.92, 2.73, 3.00, 3.18, 2.66, 3.76, NA)
# run mean function, exclude NAs
mean(gpa_section_a, na.rm=T)
# find all of the NA indices
which(is.na(gpa_section_a))
mean(gpa_section_a > 3.0, na.rm = T)
gpa_section_a
1/0
-1/0
## R OBJECTS
# get help
?mean
# vectors, fundamental data type in R
# all R objects composed of vectors
numvec <- c(2.8, 2, 14.8)
charvec <- c("Albania","Botswana","Cambodia")
# cbind appends columns into a matrix, all will be same type, auto-str conversion happens here
# matrices are vectors with columns as well as rows
matrixObj <- cbind(numvec,charvec)
# this is an R list, lists take different object types
l <- list('test',1,2,3)
print(matrixObj)
# data frames allow for different types of data
df<- data.frame(numvec,charvec)
# can use logical indexing
class(df['numvec'])
# keeps df intact
# or use $ sign
class(df$numvec)
# returns vector
# get col names of df
names(df)
# change names of rows directly, instead of leaving index
row.names(df) <- c("Idx","One","Two")
print(row.names(df))
# get the mean of a vector
mean(numvec)
# get five # summ of a vector
summary(numvec)
# get data type of vector (class)
class(numvec)
#### Component Selection and Subscripts
# R does NOT start at zero like Python, [1] is indeed the first element
newNumeric <- df$numvec
newNumeric
# pick first through third
newNumeric[1:3]
# pick first and third from vector
newNumeric[c(1,3)]
section_a <- c(3.13, 2.75, 2.15, 3.92, 1.88, 'Final Grades')
# remove final grades, or select everything except sixth position
# convert to numeric via as.numeric method
section_a <- as.numeric(section.a[-6])
sd(section_a)
mean(section_a)
### SELECTING WITH SUBSCRIPTS AND DATAFRAMES
# statistical dataset known as a data frame
# denoted by [,], first part is rows, second cols
# look at first few obs
head(cars)
# select first value from speed columns in cars df
cars[1,'speed']
# select third through seventh values in speed df, both columns
cars[3:7, ]
# select fourth value from second column (dist) in cars df
cars[4,2]
#  can also include a vector of columns to select from
cars[4,c("speed","dist")]
# now lets look at another dataset...
# what the heck is this dataset?
help(stackloss)
# str() for structure of an object, in this case a dataframe
str(stackloss)
# or simply the dimensions of the data rows x cols
dim(stackloss)
# see first ten lines
head(stackloss, 10)
### STREAMLINING AND OTHER TIPS
# streamline code by using attach and with
# attach attaches a database to R's search path
attach(cars)
# now we can just use speed and dist as set vars
speed
# get the top 6 values from speed by using head(x)
head(speed)
# last 6 values from dist
tail(dist)
# when done, detach cars
detach(cars)
# can also use with to do roughly the same but contain the assignment to a block
with(df,{
mean(numvec)
}
)
sessionInfo()
df
df['rownames'] <- 1
df
df['rownames'] <- rownames(df)
df
cars$speed
cars$speed
mean(cars$speed)
newVec <- cars$dist
newVec
## creating functions in R
# functions are R's verbs to objects being nouns
# bundle of commands
# typical function syntax
# name <- function(args) {
# expressions
# value (can use return here)
# }
# define a trim function to trim off
trim <- function(x, lower=0.0, upper=1.0) {
indices <- x >= lower & x <= upper
return x[indices]
}
x <- rnorm(20)
trim(x)
# sample takes a random sample of values
sumdice <- function(n=2){
x <- sample(1:6, n, replace=T) # sample from 1:6, of size, n with replacement
sum(x)
}
sumdice()
trim <- function(x, lower=0.0, upper=1.0) {
indices <- x >= lower & x <= upper
x[indices]
}
trim <- function(x, lower=0.0, upper=1.0) {
indices <- x >= lower & x <= upper
return x[indices]
}
numvec <- c(1.2, 3.2, 5.6, 1.2)
round(mean(numvec), digits=1)
# built in function round example:
numvec <- c(1.2, 3.2, 5.6, 1.2)
# in this case we next functions
round(mean(numvec, na.rm = TRUE), digits=1)
mean(numvec) %>% round(numvec)
library('magrittr')
mean(numvec) %>% round(numvec)
mean(numvec) %>% round(numvec,1)
mean(numvec) %>% round(numvec,digits=1)
mean(numvec) %>% round(,digits=1)
mean(numvec) %>% round(,digits=2)
mean(numvec) %>% round(digits=2)
# THE R WORKSPACE AND HISTORY
# find all ojects in current workspace
ls()
# THE R WORKSPACE AND HISTORY
# find all ojects in current workspace
ls()
# remove objects using rm
rm(df)
# THE R WORKSPACE AND HISTORY
# find all ojects in current workspace
ls()
# remove objects using rm
rm(df)
save.image('~/desktop/testspace')
# THE R WORKSPACE AND HISTORY
# find all ojects in current workspace
ls()
# remove objects using rm
rm(df)
# save entire workspace to binary R data file use save.image(filelocation), defaults to working directory
save.image('~/desktop/testspace.RData')
# use load command to load a saved workspace to R:
load(file='~/desktop/testspace.RData')
# INSTALLING AND LOADING PACKAGES IN R
# install with install.packages()
install.packages(ggplot2)
# INSTALLING AND LOADING PACKAGES IN R
# install with install.packages()
install.packages('ggplot2'')
# INSTALLING AND LOADING PACKAGES IN R
# install with install.packages()
install.packages('ggplot2')
# INSTALLING AND LOADING PACKAGES IN R
# install with install.packages()
# install from CRAN (comprehensive R Archive Network)
install.packages('ggplot2')
library(ggplot2)
t <- c(1,2,3)
source('~/Desktop/Personal/DataScience/Classes/Doing_Data_Science/R_Work/PACKAGE_CONTROL.R', echo=TRUE)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
# built in function round example:
numvec <- c(1.2, 3.2, 5.6, 1.2)
# use a built in for standard deviation
sd(numvec)
args(sd)
args(sd)
numvec <- c(1.2, 3.2, 5.6, 1.2)
# use a built in for standard deviation
sd(numvec)
# get arguments for a function
args(sd)
# in this case we nest functions
round(mean(numvec, na.rm = TRUE), digits=1)
numvec2 <- c(5.2, 3.7, 10.6, 2.2)
numvecs <- cbind(numvec2, numvec)
numvecs
numvecs <- rbind(numvec2, numvec)
numvecs
args(rbind)
pnorm(75, 85, 5)
pnorm(75, 85, 5, lower.tail=False)
pnorm(75, 85, 5, lower.tail=FALSE)
library(MASS)
rlm(stackloss$stack.loss~stackloss$Air.Flow)
library(MASS)
fit <- rlm(stackloss$stack.loss~stackloss$Air.Flow)
library(MASS)
fit <- rlm(stackloss$stack.loss~stackloss$Air.Flow)
fit
plot(fit)
